name: 'Deploy an ECR Registry to AWS'
description: 'Deploys an Amazon hosted ECR Registry to store Docker and OCI images and artifacts.'
branding:
  icon: upload-cloud
  color: red
inputs:
  # Checkout
  checkout:
    description: 'Specifies if this action should checkout the code'
    required: false
    default: 'true'
  
  # AWS
  aws_access_key_id:
    description: 'AWS access key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS secret access key'
    required: true
  aws_session_token:
    description: 'AWS session token'
    required: false
  aws_default_region:
    description: 'AWS default region'
    required: false
    default: us-east-1
  aws_resource_identifier:
    description: 'Set to override the AWS resource identifier for the deployment.  Defaults to `${org}-{repo}-{branch}`.  Use with destroy to destroy specific resources.'
    required: false
  aws_additional_tags:
    description: 'A JSON object of additional tags that will be included on created resources. Example: `{"key1": "value1", "key2": "value2"}`'
    required: false

  # Terraform
  tf_action: 
    desctiption: 'Option to run Terraform apply / destroy option. Will run plan if nothing defined.'
    required: false
    default: apply
  tf_stack_destroy:
    description: 'Set to "true" to Destroy the stack through Terraform.'
    required: false
  tf_state_file_name:
    description: 'Change this to be anything you want to. Carefull to be consistent here. A missing file could trigger recreation, or stepping over destruction of non-defined objects.'
    required: false
  tf_state_file_name_append:
    description: 'Append a string to the tf-state-file. Setting this to `unique` will generate `tf-state-aws-unique`. Can co-exist with the tf_state_file_name variable. '
    required: false
  tf_state_bucket:
    description: 'AWS S3 bucket to use for Terraform state. Defaults to `${org}-${repo}-{branch}-tf-state`'
    required: false
  tf_state_bucket_destroy:
    description: 'Force purge and deletion of S3 bucket defined. Any file contained there will be destroyed. `tf_stack_destroy` must also be `true`'
    required: false
  
  # ECR Inputs
  aws_ecr_repo_create:
    description: 'Determines whether a repository will be created'
    required: false
    default: true
  aws_ecr_repo_type:
    description: 'The type of repository to create. Either `public` or `private`. Defaults to `private`.'
    required: false
  aws_ecr_repo_name:
    description: 'The name of the repository. If none, will use the default resource-identifier.'
    required: false
  aws_ecr_repo_mutable:
    description: 'The tag mutability setting for the repository. Set this to true if `MUTABLE`. Defaults to false, so `IMMUTABLE`'
    required: false
  aws_ecr_repo_encryption_type:
    description: 'The encryption type for the repository. Must be one of: `KMS` or `AES256`. Defaults to `AES256`'
    required: false
  aws_ecr_repo_encryption_key_arn:
    description: 'The ARN of the KMS key to use when encryption_type is `KMS`. If not specified, uses the default AWS managed key for ECR'
    required: false
  aws_ecr_repo_force_destroy:
    description: 'If `true`, will delete the repository even if it contains images. Defaults to `false`'
    required: false
  aws_ecr_repo_image_scan:
    description: 'Indicates whether images are scanned after being pushed to the repository (`true`) (default) or not scanned (`false`)'
    required: false
  aws_ecr_registry_scan_rule:
    description: 'One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. Use []'
    required: false
  aws_ecr_registry_pull_through_cache_rules:
    description: 'List of pull through cache rules to create. Use map(map(string)). '
    required: false
  aws_ecr_registry_scan_config:
    description: 'Scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`. Defaults to null.'
    required: false
  aws_ecr_registry_replication_rules_input:
    description: 'The replication rules for a replication configuration. A maximum of 10 are allowed. Defaults to `[]`.'
    required: false
  aws_ecr_repo_policy_attach:
    description: 'Determines whether a repository policy will be attached to the repository. Defaults to `true`.'
    required: false
  aws_ecr_repo_policy_create:
    description: 'Determines whether a repository policy will be created. Defaults to `true`.'
    required: false
  aws_ecr_repo_policy_input:
    description: 'The JSON policy to apply to the repository. If defined overrides the default policy'
    required: false
  aws_ecr_repo_read_arn:
    description: 'The ARNs of the IAM users/roles that have read access to the repository. (Comma separated list)'
    required: false
  aws_ecr_repo_write_arn:
    description: 'The ARNs of the IAM users/roles that have read/write access to the repository. (Comma separated list)'
    required: false
  aws_ecr_repo_read_arn_lambda:
    description: 'The ARNs of the Lambda service roles that have read access to the repository. (Comma separated list)'
    required: false
  aws_ecr_lifecycle_policy_input:
    description: 'The policy document. This is a JSON formatted string. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs'
    required: false
  aws_ecr_public_repo_catalog:
    description: 'Catalog data configuration for the repository. Defaults to `{}`.'
    required: false
  aws_ecr_registry_policy_input:
    description: 'The policy document. This is a JSON formatted string'
    required: false
  aws_ecr_additional_tags:
    description: 'A list of strings that will be added to created resources'
    required: false

  # ECR
  ecr_repository_arn:
    description: "ECR Repo ARN"
    value: ${{ steps.deploy.outputs.ecr_repository_arn }}
  ecr_repository_url:
    description: "ECR Repo URL"
    value: ${{ steps.deploy.outputs.ecr_repository_url }}

runs:
  using: 'composite'
  steps:
    - name: Checkout
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      if: ${{ inputs.aws_access_key_id != '' }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_default_region }}
        role-to-assume: ${{ inputs.aws_role_to_assume }}

    - name: Deploy
      id: deploy
      shell: bash
      env:
        # AWS
        AWS_DEFAULT_REGION: ${{ inputs.aws_default_region }}
        AWS_RESOURCE_IDENTIFIER: ${{ inputs.aws_resource_identifier }}
        AWS_ADDITIONAL_TAGS: ${{ inputs.aws_additional_tags }}

        # Terraform
        TF_STACK_DESTROY: ${{ inputs.tf_stack_destroy }}
        TF_STATE_FILE_NAME: ${{ inputs.tf_state_file_name }}
        TF_STATE_FILE_NAME_APPEND: ${{ inputs.tf_state_file_name_append }}
        TF_STATE_BUCKET: ${{ inputs.tf_state_bucket }}
        TF_STATE_BUCKET_DESTROY: ${{ inputs.tf_state_bucket_destroy }}

        # ECR
        AWS_ECR_REPO_CREATE: ${{ inputs.aws_ecr_repo_create }}
        AWS_ECR_REPO_TYPE: ${{ inputs.aws_ecr_repo_type }}
        AWS_ECR_REPO_NAME: ${{ inputs.aws_ecr_repo_name }}
        AWS_ECR_REPO_MUTABLE: ${{ inputs.aws_ecr_repo_mutable }}
        AWS_ECR_REPO_ENCRYPTION_TYPE: ${{ inputs.aws_ecr_repo_encryption_type }}
        AWS_ECR_REPO_ENCRYPTION_KEY_ARN: ${{ inputs.aws_ecr_repo_encryption_key_arn }}
        AWS_ECR_REPO_FORCE_DESTROY: ${{ inputs.aws_ecr_repo_force_destroy }}
        AWS_ECR_REPO_IMAGE_SCAN: ${{ inputs.aws_ecr_repo_image_scan }}
        AWS_ECR_REGISTRY_SCAN_RULE: ${{ inputs.aws_ecr_registry_scan_rule }}
        AWS_ECR_REGISTRY_PULL_THROUGH_CACHE_RULES: ${{ inputs.aws_ecr_registry_pull_through_cache_rules }}
        AWS_ECR_REGISTRY_SCAN_CONFIG: ${{ inputs.aws_ecr_registry_scan_config }}
        AWS_ECR_REGISTRY_REPLICATION_RULES_INPUT: ${{ inputs.aws_ecr_registry_replication_rules_input }}
        AWS_ECR_REPO_POLICY_ATTACH: ${{ inputs.aws_ecr_repo_policy_attach }}
        AWS_ECR_REPO_POLICY_CREATE: ${{ inputs.aws_ecr_repo_policy_create }}
        AWS_ECR_REPO_POLICY_INPUT: ${{ inputs.aws_ecr_repo_policy_input }}
        AWS_ECR_REPO_READ_ARN: ${{ inputs.aws_ecr_repo_read_arn }}
        AWS_ECR_REPO_WRITE_ARN: ${{ inputs.aws_ecr_repo_write_arn }}
        AWS_ECR_REPO_READ_ARN_LAMBDA: ${{ inputs.aws_ecr_repo_read_arn_lambda }}
        AWS_ECR_LIFECYCLE_POLICY_INPUT: ${{ inputs.aws_ecr_lifecycle_policy_input }}
        AWS_ECR_PUBLIC_REPO_CATALOG: ${{ inputs.aws_ecr_public_repo_catalog }}
        AWS_ECR_REGISTRY_POLICY_INPUT: ${{ inputs.aws_ecr_registry_policy_input }}
        AWS_ECR_ADDITIONAL_TAGS: ${{ inputs.aws_ecr_additional_tags }}
      run: |
        echo "::group::Generating Terraform pre-requisites" > /dev/null
        echo "running scripts/generate_deploy.sh"
        $GITHUB_ACTION_PATH/scripts/generate_deploy.sh
        echo "::endgroup::"
  
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      shell: bash
      run: |
        echo "::group::Terraform Init"
        terraform -chdir=$GITHUB_ACTION_PATH/terraform_code init
        echo "::endgroup::"
    
    - name: Terraform Validate
      id: validate
      shell: bash
      run:  |
        echo "::group::Terraform Validate"
        terraform -chdir=$GITHUB_ACTION_PATH/terraform_code validate
        echo "::endgroup::"
    
    - name: Terraform Plan
      if: ${{ success () && inputs.tf_action != 'destroy' }}
      id: plan
      shell: bash
      run:  |
        echo "::group::Terraform Plan"
        terraform -chdir=$GITHUB_ACTION_PATH/terraform_code plan -input=false
        echo "::endgroup::"

    - name: Terraform Apply
      id: apply
      if: ${{ success() && inputs.tf_action == 'apply' }}
      shell: bash
      run: |
        echo "::group::Terraform Apply"
        terraform -chdir=$GITHUB_ACTION_PATH/terraform_code apply -auto-approve
        echo "::endgroup::"
        terraform -chdir=$GITHUB_ACTION_PATH/terraform_code output | grep ecr_repository_arn | sed -e 's/ *= */=/g' -e 's/"//g' >> $GITHUB_OUTPUT
        terraform -chdir=$GITHUB_ACTION_PATH/terraform_code output | grep ecr_repository_url | sed -e 's/ *= */=/g' -e 's/"//g' >> $GITHUB_OUTPUT

    - name: Terraform Destroy
      if: ${{ success() && inputs.tf_action == 'destroy' }}
      shell: bash
      run:  |
        echo "::group::Terraform Destroy"
        terraform -chdir=$GITHUB_ACTION_PATH/terraform_code destroy -auto-approve
        echo "::endgroup::"

    - name: Purge and delete tf-state bucket
      if: ${{ success() && inputs.tf_action == 'destroy' && inputs.tf_state_bucket_destroy == 'true' }}
      shell: bash
      env: 
        TF_STATE_BUCKET: ${{ inputs.tf_state_bucket }}
      run:  |
        echo "::group::Purge and delete tf-state bucket"
        $GITHUB_ACTION_PATH/scripts/destroy_tf_state_bucket.sh
        echo "::endgroup::"

    - name: Print result
      if: ${{ success() && steps.apply.outputs.ecr_repository_arn != '' }}
      shell: bash
      run: |
        echo "## It's published! :rocket:" >> $GITHUB_STEP_SUMMARY
        echo ${{ steps.apply.outputs.ecr_repository_arn }} >> $GITHUB_STEP_SUMMARY
        echo ${{ steps.apply.outputs.ecr_repository_url }} >> $GITHUB_STEP_SUMMARY

    - name: Print result
      if: ${{ success() && inputs.tf_action == 'destroy' && inputs.tf_state_bucket_destroy == 'true' }}
      shell: bash
      run: |
        echo "## Deploy Destroyed! :boom:" >> $GITHUB_STEP_SUMMARY
        echo "Infrastructure should be gone now!" >> $GITHUB_STEP_SUMMARY

    - name: Print result
      if: ${{ success() && inputs.tf_action == 'destroy' && inputs.tf_state_bucket_destroy != 'true' }}
      shell: bash
      run: |
        echo "## Deploy Destroyed! :boom:" >> $GITHUB_STEP_SUMMARY
        echo "Buckets and infrastructure should be gone now!" >> $GITHUB_STEP_SUMMARY
 
    - name: Print error result
      if: ${{ failure() }} 
      shell: bash
      run: |
        echo "## Workflow failed to run :fire:" >> $GITHUB_STEP_SUMMARY
        echo "Please check the logs for possible errors." >> $GITHUB_STEP_SUMMARY
        echo "If you consider this is a bug in the Github Action, please submit an issue to our repo." >> $GITHUB_STEP_SUMMARY